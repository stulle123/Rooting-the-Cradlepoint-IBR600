diff --git a/mitmproxy/tools/console/consoleaddons.py b/mitmproxy/tools/console/consoleaddons.py
index f88603d..b1503e5 100644
--- a/mitmproxy/tools/console/consoleaddons.py
+++ b/mitmproxy/tools/console/consoleaddons.py
@@ -18,6 +18,7 @@ from mitmproxy.tools.console import keymap
 from mitmproxy.tools.console import overlay
 from mitmproxy.tools.console import signals
 from mitmproxy.utils import strutils
+from mitmproxy.tools.console.netcloud_parser import NetcloudParser

 logger = logging.getLogger(__name__)

@@ -375,7 +376,7 @@ class ConsoleAddon:
         focus_options = []

         if isinstance(flow, tcp.TCPFlow):
-            focus_options = ["tcp-message"]
+            focus_options = ["tcp-message", "netcloud"]
         elif isinstance(flow, udp.UDPFlow):
             focus_options = ["udp-message"]
         elif isinstance(flow, http.HTTPFlow):
@@ -466,6 +467,33 @@ class ConsoleAddon:
             message = flow.messages[-1]
             c = self.master.spawn_editor(message.content or b"")
             message.content = c.rstrip(b"\n")
+        elif flow_part == "netcloud":
+            parser = NetcloudParser()
+            message = flow.messages[-1]
+            message_decoded = b""
+            message_encoded = b""
+
+            try:
+                message_size, cmd_id, = parser.header_decode(message.content[:parser.header_size])
+                message_decoded = parser.decode(message.content[parser.header_size:])
+            except:
+                message_decoded = b""
+
+            if message_decoded:
+                message_modified = self.master.spawn_editor(str(message_decoded))
+                message_data = parser.encode(message_modified)
+                message_header = parser.header_encode(len(message_data), cmd_id)
+                message_encoded = message_header + message_data
+            else:
+                logger.info("Could not decode Netcloud packet.")
+                c = self.master.spawn_editor(message.content or "b")
+                message.content = c.rstrip(b"\n")
+
+            if message_encoded:
+                logger.info(f"Modified message: {message_modified}")
+                message.content = message_encoded.rstrip(b"\n")
+            else:
+                logger.info("Could not encode Netcloud packet.")

     def _grideditor(self):
         gewidget = self.master.window.current("grideditor")
